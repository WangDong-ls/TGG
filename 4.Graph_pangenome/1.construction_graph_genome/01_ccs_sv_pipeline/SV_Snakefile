
#configfile: "config.yaml"

##################################################
#This is for structure variation calling
#Author: Lin Cheng
#Time: 2020-12-8
#Email: chenglin20170390@163.com
##################################################
SAMPLE_INDEX = {"sampleA","sampleB"}
INDEX_REF = "01_raw_data/ref/sv_refer.fa"
THREADS = "2"

rule all:
    input:
        expand("04_consensus_vcf/{sample}.consensus.vcf",sample=SAMPLE_INDEX)

rule ngmlr_alignment:
    input:
        "01_raw_data/{sample}.ccs.fa"
    output:
        "02_bam/{sample}.ngmlr.bam"
    shell:
        "ngmlr -t {THREADS} -r {INDEX_REF} -q {input[0]} -o {output} "


rule sort:
    input:
        "02_bam/{sample}.ngmlr.bam"
    output:
        "02_bam/{sample}.ngmlr.sort.bam"
    shell:
        "samtools sort -@ {THREADS} -O BAM -o {output} {input} "

rule index:
    input:
        "02_bam/{sample}.ngmlr.sort.bam"
    output:
        "02_bam/{sample}.ngmlr.sort.bam.bai"
    shell:
        "samtools index {input} "

rule sniffles_call:
    input:
        "02_bam/{sample}.ngmlr.sort.bam",
        "02_bam/{sample}.ngmlr.sort.bam.bai"
    output:
        "03_vcf/01_sniffles/{sample}.sniffles.vcf"
    shell:
        "sniffles -t {THREADS} --ccs_reads -m {input[0]} -v {output}"

rule cuteSV_call:
    input:
        "02_bam/{sample}.ngmlr.sort.bam",
        "02_bam/{sample}.ngmlr.sort.bam.bai"
    output:
        "03_vcf/02_cuteSV/{sample}.cuteSV.vcf"
    shell:
        "cuteSV {input[0]} {INDEX_REF} {output} ./ --threads {THREADS} --max_cluster_bias_INS 1000 --diff_ratio_merging_INS 0.9 --max_cluster_bias_DEL 1000 --diff_ratio_merging_DEL 0.5"


rule svim_call:
    input:
        "02_bam/{sample}.ngmlr.sort.bam",
        "02_bam/{sample}.ngmlr.sort.bam.bai"
    output:
        "03_vcf/03_svim/{sample}/variants.vcf",
        "03_vcf/03_svim/{sample}/pre-variants.vcf"
    params:
        DIR="03_vcf/03_svim/{sample}"
    shell:
        """
        /public/agis/huangsanwen_group/chenglin/softwares/miniconda3/envs/svim_env/bin/svim alignment {params.DIR} {input[0]} {INDEX_REF} --insertion_sequences
        cp {output[0]} {output[1]}
        #cat {output[0]} | grep -v '#' | awk '$6>=10' > {output[0]}
        """

rule pbsv_align:
    input:
        "02_bam/{sample}.ngmlr.sort.bam",
        "02_bam/{sample}.ngmlr.sort.bam.bai"
    output:
        "02_bam/{sample}.pbsv.sort.bam",
    shell:
        "/public/agis/huangsanwen_group/chenglin/softwares/jre1.8.0_251/bin/java -jar /public/agis/huangsanwen_group/chenglin/softwares/picard/picard.jar AddOrReplaceReadGroups I={input[0]} O={output[0]} RGID=4 SORT_ORDER=coordinate RGSM={input[0]} RGLB=library1 RGPL=illumina RGPU=unit1"

rule pbsv_discovery:
    input:
        "02_bam/{sample}.pbsv.sort.bam"
    output:
        "03_vcf/04_pbsv/{sample}/pbsv.svsig.gz"
    shell:
        "pbsv discover {input} {output}"


rule pbsv_call:
    input:
        "03_vcf/04_pbsv/{sample}/pbsv.svsig.gz",
    output:
        "03_vcf/04_pbsv/{sample}/pbsv.vcf"
    shell:
        "pbsv call {INDEX_REF} {input[0]} {output}"

rule consensus:
    input:
        "03_vcf/01_sniffles/{sample}.sniffles.vcf",
        "03_vcf/02_cuteSV/{sample}.cuteSV.vcf",
        "03_vcf/03_svim/{sample}/variants.vcf",
        "03_vcf/04_pbsv/{sample}/pbsv.vcf"
    output:
        "04_consensus_vcf/{sample}.consensus.vcf"
    params:
        "03_vcf/05_sample_list/list_{sample}"
    shell:
        """
        mkdir -p 03_vcf/05_sample_list/
        ls {input[0]} {input[1]} {input[2]} {input[3]}> {params}
        /public/agis/huangsanwen_group/chenglin/softwares/SURVIVOR-master/Debug/SURVIVOR merge {params} 1000 2 1 1 0 30 {output}
        """






